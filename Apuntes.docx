          1. Introducción a JavaScript

Anotación: Hay ejemplos prácticos en los videos que no realicé al ser temas que ya sé y no me hacen falta repasar. Por eso algunas carpetas pueden estar vacias.
Vincular JS con HTML: https://www.w3schools.com/tags/att_script_src.asp

    1. Sintaxis de JavaScript

Es case senstitive
Es de tipado debil/dinamico: Las variables son del tipo de dato que almacenan.
Las sentencias finalizan con ;. No es obligatorio pero es muy recomendable.
Los bloques finalizan con la lave de cierre '}'. De forma opcional se puyede añadir un ; despues de la llave.

    2. Variables y constantes scope o ámbito

Una variable es un espacio que reservamos en memoria para almacenar un dato que podrá cambiar durante la ejecución de nuestro programa.
    La palabra reservada es "let", no es recomendable usar "var".
Las variables se pueden: declarar, inicializar y modificar.
Una constante es un espacio que reservamos en memoria para almacenar un dato que no cambiará durante la ejecución de nuestro programa.
    La palabra reservada para declarar constantes es "const".
El scope o ámbito es la zona donde existe nuestra variable o constante.

    3. Declaración, inicialización y Modificación

Una variable se declara con la siguiente estructura:
    let nombre;
Una variable se inicializa con la siguiente estructura:
    numero = 5;
Se puede declarar e inicializar en la misma sentencia:
    let numero = 5;
Para modificar el valro de una variable existente:
    numero = 3;
Las constantes solo admiten la declaración e inicialización en la misma sentencia. Se modifica unicamente en su declaración.
    const PI = 3.14;

    4. Tipos de datos principales en JavaScript

Primitivos.
    Numeros -> let numero = 5;
    Strings (cadenas) -> let palabra = "hola"; let palabra = 'hola';
    Boolean -> let respuesta = true; let respuesta = false;
    Undefined.
    Null.
    Symbol.

    5. Tipos de operadores

Matématicos
    Suma/Concatenación: +.
    Resta: -.
    Multiplicación: *.
    División: /.
    Módulo: %.
Asignación
    Asignación: =.
    Suma y asignación: +=.
    Resta y asignación: -=.
    Multiplicación y asignación: *=.
    División y asignación: /=.
    Módulo y asignación: %=.
Incremento/Decremento
    Post-incremento en 1: x++.
    Pre-incremento en 1: ++x.
    Post-decremento en 1: x--.
    Pre-decremento en 1: --x.
Operadores Lógicos
    Igualdad: ==.
    Desigualdad: !=.
    Estrictamente iguales: ===. (Mismo valor y mismo tipo).
    Estrictamente desiguales: !==. (Mismo valor y mismo tipo).
    Mayor que: >.
    Menor que: <.
    Mayor o igual que: >.
    Menor o igual que: <.

    6. Strings

Método: Es todo aquello que la cadena puede hacer. Ej: Convertirse en mayúsculas.
Propiedad: Son caracteristicas que al cadena tiene por ser una cadena. Ej: Longitud.
Se cumplen utilizando la siguiente nomenclatura, al igual que con todos los objetos:
    string.método().
    string.propiedad.
Documentación de métodos y propiedades: https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/String
Los template string se engloban dentro de los caracteres ``, dentro funciona de igual manera que en C#.
 
    7. Objeto Math

Documentación de Math: https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Math
El objeto Math se utiliza para hacer operaciones matemáticas complejas/específicas.
Al ser un objeto también utiliza la nomenclatura del punto.

    8. Condicionales

El flujo de un programa siempre será de arriba hacia abajo.
Estructurasn de control de flujo:
    Condicionales
        Simples
        Compuestos
        Múltiples
    Bucles
        Determinados
        Indeterminados

La estructura switch tiene una sintaxis múltiple, es decir, puedo tener muchos case sin break, se van a ejecutar todos hasta encontrar un break o terminar con el programa.
Ejemplo encadenado:
    let num = 1;
    switch(num){
        case 1:
            num++;
        case 2:
            num++;
        case 3:
            num++;
        case 4:
            num++;
        case 5:
            num++;
    }
    console.log(num); -> Será 6.

Ejemplo sin encadenar
    let num = 1;
    switch(num){
        case 1:
        case 3:
        case 5:
            console.log("es impar");
            break;
        case 2:
        case 4:
            console.log("es par");
            break;
    }

    9. Operador ternario

Se utiliza cuando una condición será true o false, al igual que el if.
Su ejecución puede tener una ovarias sentencias, en este caso irán separadas por coma y entre paréntesis. Puede tener sentencias compuestas
    Condición ? (true) : (false) 
    Condición ? ((true, true) : (false, false))
    Ejemplo: (2 % 2 === 0) ? console.log("Es par") : console.log("Es impar")

    10. Arrays
 
Documentación de Array: https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Array
Son estructuras que nos permiten almacenar varios datos y agruparlos.
Se pueden llenar con cualquier tipo de dato válido en JavaScript y deben ir separados por comas.
Se pueden mezclar tipos de datos en un mismo array, pero no es recomendable.
Se declaran con llaves cuadradas o corchetes.
Pueden declararse vacios o con contenido ya establecido.
Pueden añadirse o eliminarse elementos en el momento que queramos (Funcionan como listas).
Cada uno de los elementos podrá ser identificado por su índice, es decir por su posición.
Los índices empiezan a contar desde el 0.
Ejemplos de declaración:
    let numeros = [];
    let numeros = [x, z, y, b, ...];
    let numeros = new Array();

    11. Bucles
Se usan cuando queremos que un trozo de código se repita.
Existen bucles determinados e indeterminados.
Los determinados se usan cuando especificamos el número de veces que se va a repetir.
    Ej: Imprimir números del 1 al 10.
Los indeterminados los utilizamos cuando no sabemos el número de veces que se va a repetir.
    Ej: Repetir mensaje de introducir contraseña.
La estructura de un bucle es siempre la misma.
    Ej: Bucle { Código a ejecutar }.
En EMASCRIPT 6 llegaron los bucles for in y for of.
    La palabra of devolverá el valor del elemento en el array.
    La palabra in devolverá el index del elemento en el array. Podemos sacar el contenido como por ejemplo: array[variable_local]; (Como en C).



        2. Objetos, funciones y métodos
    
    1. Objetos introducción

Son estructuras de datos que representan propiedades, valores y acciones que puede realizar el objeto.
Todos los objetos tiene propiedades o atributos y comportamientoes o acciones representados por pares key:value.
Para acceder a las propiedades y acciones del objeto se utiliza la nomeclatura del punto. Otra forma es: objeto['atributo'].

    2. Funciones introducción

Son fragmentos de código que escribimos para ejectuar una tarea y no volver a escribir el mismo código más de una vez.
Nos ayuda a modularizar el código.
Las funciones deben realizar una sola tarea.
La sintaxis puede ser:
    function NOMBRE () {CODIGO A EJECUTAR};
    const NOMBRE = () => {CODIGO A EJECUTAR};
Pueden recibir parámetros.
Pueden devolver valores.
Con la palabra return devolvemos un valor.
En la funcion const al utilizar lamba existe un return implicito si hay una única instrucción, también se pueden obviar las llaves. En caso de tener mas de una linea se utiliza return.
    Ejemplo: const NOMBRE = (p1, p2) => p1 + p2; -> Return implicito

    3. Programación Orienteada a Objetos - Clases

Es un paradigma de la programación. Un paradigma es una forma de resolver un problema.
Algunos de los conceptos fundamentales son:
    Clase
    Herencia
    Objeto
    Método
    Evento
    Etc
Las clases necesitan una función constructora. Se tiene que llamar al constructor y se ejecuta cuando creemos un objeto (Desconozco si hay una clase por defecto que inicializa todo en 0 en caso de no haber constructor como en .NET).
La sintaxis es:
    class NOMBRE_DE_LA_CASE{
        constructor(PARAMETROS){
            this.ATRIBUTO
        }
    }
Los objetos pueden tener funciones asociadas a él. En ese caso se lo denomina 'Métodos'.
Para crear un objeto utilizando la clase se hace con la palabra reservada new y el nombre de la clase que queremos utilizar.
Una vez INSTANCIADO el objeto podremos acceder a sus propiedades y métodos utilizando la nomeclatura del punto o buscando su propiedad en el objeto.
Existen los getter y setters para acceder a los atributos a través de las propiedades get y set.

    4. Spread Operator

El spread operator u operador de expansión principalmente expande el contenido de un array. Se podría decir que devuelve el valor de cada index por separado.
Utiliza ... para al comienzo para indicar que es un Spread Operator.
Nos permite que una función pueda recibir una cantidad indefinida de parametros con el concepto Rest parameters: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters
Por ejemplo:
    const numbers = [12, 2, 3, 23, 43, 2, 3];
    console.log(...numbers); | OutPut => 12 2 3 23 43 2 3



        3. DOM Document Object Model    
    
            PEGAR FOTO ARBOL DOM

    1. DOM - Introducción

Documentación: https://www.w3schools.com/js/js_htmldom.asp
Se considera DOM toda la estructura HTML de un documento.
No es JavaScript, es una API (Application Programing Interface) que se utiliza a través de JavaScript que viene integrado con el navegador.
El DOM establece una jerarquia a través de nodos, constituyendo algo parecido a un arbol inverso.
Cada parte del arbol del documento es un NODO.
Hay varios tipos de nodos, los más utilizados son:
    Element node - 1 (Cualquier etiqueta HTML).
    Text node - 3 (El contenido de la etiqueta HTML).
    Comment node - 8 (Cualquier comentario en HTML).
Para vincular JavaScript con HTML utilizamos la etiqueta <script src"PATH"></script>. Se recomienda colocarla la linea anterior al cierre del body para que el script pueda acceder a todos los elementos declarados.

    2. Selección de elementos

Los elementos se guardan en una constante porque el elemento no van a cambiar.
Los pseudo-elementos no existen en el DOM, sin embargo hay formas de acceder a ellos que veremos más adelante.
document.getElementById("ID") - Acceder a un elemento a través de su id.
document/element.querySelector("SelectorCSS") - Accede al primer elemento que coincida con el selector CSS.
document/element.querySelectorAll("SelectorCSS") - Accede a todos los elementos que coincidan con el selector CSS, devuelve un nodeList.
Para los selectores CSS utilizamos el . al principio para indicar que es una clase.

    3. Atributos y clases
Atributos
    element.getAttribute("attribute"); | -> Nos devuelve el valor del atributo del elemento.
    element.setAttribute("attribute", value); -> Nos permite cambiar el valor del atributo del elemento. Tambien podemos setear el valor de un atributo que no haya sido declarado en la etiqueta en un comienzo. Ej: element.setAttribute("placeholder", "Ingrese su nombre");
Clases
    element.classList.add("class", "class", ...); | -> Añadimos una o más clases.
    element.classList.remove("class", "class", ...); | -> Remueve una o más clases.
    element.classList.toggle("class" [,force]); | -> Deshabilita o habilita una clase. Toggle devuelve true si contiene esa clase, en caso de contenerla no añade la clase especificada en el force y viceversa con el false.
    element.classList.contains("class"); | -> Devuelve true o false en función si tiene la clase o no.
    element.classList.replace("oldclase", "newclass"); | -> Sustituye la clase del primer parametro por la del segundo.
Atributos directos más importantes
    id
    value

    4. Eventos de ratón y teclado

Documentación: https://developer.mozilla.org/es/docs/Web/Events
Un evento es cualquer cosa que sucede en nuestro documento. Puede ejecutarlo un usuario o la misma programación de la página.
La sintaxis correcta para el mantenimiento y lectura de una página web sería: Element.addEventosListener('event', callback);
El callback es una función anonima que se ejecuta cuando se dispara el evento.

    5. Objeto evento

El objeto evento vive siempre y cuando haya un evento.
Ejemplo del objeto evento: input.addEventListener("keyup", (e) => console.log(e));
El objeto evento nos permite saber donde hicimos click. Por ejemplo si tenemos un div dentor de otro div, podemos saber donde se hizo click y a que objeto interno afecto. Ejemplo en el ejercicio 4 del curso-
Los eventos los podemos escuchar (addEventListener) y también los podemos forzar. Para forzarlos simplemente utilziamos la sintaxis element.evento(). 
Podemos evitar el comportamiento por default de los eventos utilizando .preventDefault(). Esto puede ser muy util para bloquear el envio de un formulario al hacer click en un boton de "Enviar".

    6. Crear e instanciar elementos

Crear un elemento: document.createElement(element)
Escribir texto en un elemento: element.textContent = texto
Escribir HTML en un elemento: element.innerHTML = código HTML

Añadir un elemento al DOM: parent.appendchild(element);

Añadir fragmentos de código: document.createDocumentFragment();

Ejemplos prácticos y buenas prácticas en el ejercicio correspondiente. Son algunas formas (malas y buenas) de añadir HTML (que también añade un nodo a la jerarquia) con JavaScript.

    7. DOM - Recorrerlo (DOM Traversing)



    8. Insertar, clonar y borrar elementos

    9. Objetos nativos y timers

    8.    Shortcuts

Pagina: https://medium.com/@ashley.karhoff1/emmet-shortcuts-to-quickly-generate-html-tags-and-css-classes-aeb04cd48aec
Shortcut para crear varios elementos HTML duplicados: element{EJEMPLO-$}*CANTIDAD -> Las {} son opcionales, el $ da comienzo a partir del 1. Es posible combinarlo al final con el "." o el "#".
Para anidar elementos utilizamos el simbolo ">": Ejemplo: nav>ul>li*4>a
Añadir un div (por defecto) con una clase: ."nombreClase" -> Poniendo puntos añado mas clases
Añadir un div (por defecto) con un id y una clase (opcional): #"nombreId"."nombreClase" -> Poniendo puntos añado mas clases

